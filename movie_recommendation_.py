# -*- coding: utf-8 -*-
"""Movie Recommendation .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UnaMODwl49OP3NrAy60eEon1CfOSbaE2
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
# TfidfVectorizer - This is used to convert text data into numerical values
from sklearn.metrics.pairwise import cosine_similarity
import os

#loading data
movies_data = pd.read_csv('/content/movies.csv')
#about printing first five rows of data frame
movies_data.head()

#no. of rows and columns
movies_data = pd.read_csv('/content/movies.csv')
#about printing first five rows of data frame
movies_data.head()
movies_data.shape

#selction the relevant features for recommendation
import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
# TfidfVectorizer - This is used to convert text data into numerical values
from sklearn.metrics.pairwise import cosine_similarity
import os
movies_data = pd.read_csv('/content/movies.csv')
#about printing first five rows of data frame
movies_data.head()
selected_features =['genres', 'keywords','tagline', 'cast', 'director']
print(selected_features)

#replacing the null values with null string
for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')
combined_features = movies_data['genres']+ ' ' + movies_data['keywords']+' '+movies_data['tagline']+ ' ' + movies_data['cast'] +' '+ movies_data['director']

print(combined_features)

#converting the text data features vectors ,
from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)
print(feature_vectors)

#cosine Similarty
similarity = cosine_similarity(feature_vectors)
print(similarity)

print(similarity.shape)

movie_name = input(' Enter your favourite movie name : ')

print(movie_name)

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)
index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

print('Movies suggested for you : \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1